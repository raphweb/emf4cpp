«REM»
CMakeLists.ext
Copyright (C) Cátedra SAES-UMU 2010 <andres.senac@um.es>
Copyright (C) INCHRON GmbH 2016 <soeren.henning@inchron.com>

EMF4CPP is free software: you can redistribute it and/or modify it
under the terms of the GNU Lesser General Public License as published
by the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

EMF4CPP is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
«ENDREM»

«IMPORT org::eclipse::emf::ecore»

«EXTENSION template::FQN»
«EXTENSION template::Packages»

«DEFINE MainCMake FOR EPackage»
«FILE "CMakeLists.txt" NOOVERWRITE-»
«IF (boolean) GLOBALVAR internalLicense-»
«EXPAND template::License::LicenseMakefile FOR "CMakeLists.txt"-»
«ELSE-»
«EXPAND template::EndUserLicense::LicenseMakefile FOR "CMakeLists.txt"-»
«ENDIF-»
cmake_minimum_required(VERSION 3.5)

if(NOT DEFINED CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
endif(NOT DEFINED CMAKE_BUILD_TYPE)

FILE(GLOB CMAKES "${CMAKE_CURRENT_SOURCE_DIR}/*.cmake")

foreach(cmake ${CMAKES})
  include(${cmake})
endforeach(cmake)

«REM»
set(CPACK_GENERATOR TGZ STGZ)
set(CPACK_PACKAGE_VERSION_MAJOR "0")
set(CPACK_PACKAGE_VERSION_MINOR "0")
set(CPACK_PACKAGE_VERSION_PATCH "1")
set(CPACK_PACKAGE_VENDOR "Cátedra SAES-UMU")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "Andrés Senac <andres.senac@um.es>")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Cátedra SAES-UMU: EMF4CPP «name» metamodel")
set(CPACK_SOURCE_GENERATOR TGZ)
include(CPack)
«ENDREM»
«ENDFILE-»
«ENDDEFINE»

«DEFINE SOURCES FOR EPackage-»
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")»Impl.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")»Impl.cpp
    «FOREACH EClassifiers.typeSelect(EClass) AS class-»
    ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")».cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")»Impl.cpp
    «ENDFOREACH-»
«EXPAND SOURCES FOREACH ESubpackages-»
«ENDDEFINE»

«DEFINE HEADERS FOR EPackage-»
	${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")».hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")»_forward.hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")».hpp
    ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")».hpp
    «FOREACH EClassifiers.typeSelect(EClass) AS class-»
    ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")».hpp
    «ENDFOREACH-»
    «FOREACH EClassifiers.typeSelect(EEnum) AS enum-»
    ${CMAKE_CURRENT_SOURCE_DIR}/«enum.getFQN("/")».hpp
    «ENDFOREACH-»
«EXPAND HEADERS FOREACH ESubpackages-»
«ENDDEFINE»

«DEFINE INSTALL FOR EPackage-»
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")».hpp DESTINATION include/emf4cpp/«getDirFQN()»)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getFQN("/")»_forward.hpp DESTINATION include/emf4cpp/«getDirFQN()»)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getFactoryPrefix("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getPackagePrefix("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)   
«FOREACH EClassifiers.typeSelect(EClass) AS class-»
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«class.getFQN("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)
«ENDFOREACH-»
«FOREACH EClassifiers.typeSelect(EEnum) AS enum-»
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«enum.getFQN("/")».hpp DESTINATION include/emf4cpp/«getFQN("/")»)
«ENDFOREACH-»
«EXPAND INSTALL FOREACH ESubpackages-»
«ENDDEFINE»

«DEFINE CMake FOR EPackage»
«LET getFQN("_") AS fqn»
«FILE fqn+".cmake"-»
«IF (boolean) GLOBALVAR internalLicense»
«EXPAND template::License::LicenseMakefile FOR fqn+".cmake"-»
«ELSE»
«EXPAND template::EndUserLicense::LicenseMakefile FOR fqn+".cmake"-»
«ENDIF»
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall -Wextra -Wdouble-promotion -fshort-enums")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG -s")
set(CMAKE_CXX_FLAGS_MINSIZEREL     "${CMAKE_CXX_FLAGS_MINSIZEREL} -Os -DNDEBUG")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELWITHDEBINFO} -O2 -g")

include(GNUInstallDirs)

set(«fqn»_SOURCES
«EXPAND SOURCES FOR this-»
)

set(«fqn»_HEADERS
«EXPAND HEADERS FOR this-»
)

«EXPAND INSTALL FOR this-»
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/«getDllExtensionPrefix()».hpp DESTINATION include/emf4cpp/«getFQN("/")»)

include_directories(${CMAKE_CURRENT_SOURCE_DIR})
# include_directories(${CMAKE_CURRENT_SOURCE_DIR} «GLOBALVAR ecorePath» «GLOBALVAR ecoreCppPath»)
«IF (boolean) GLOBALVAR bootstrap-»
«ELSE-»
# link_directories(«GLOBALVAR ecoreLibraryPath»)
«ENDIF-»

add_library(«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» SHARED ${«fqn»_HEADERS} ${«fqn»_SOURCES})
add_library(«((String) GLOBALVAR projectName).toUpperCase()»::«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» ALIAS «((String) GLOBALVAR projectName).toLowerCase()»-«fqn»)

target_include_directories(«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        $<INSTALL_INTERFACE:include/emf4cpp>
    )

«IF (boolean) GLOBALVAR bootstrap-»
if(EMF4CPP_USE_QT_5)
	set_target_properties(«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» PROPERTIES COMPILE_FLAGS "-DMAKE_ECORE_DLL" VERSION ${PROJECT_VERSION} SOVERSION ${PROJECT_VERSION_MAJOR} COMPILE_DEFINITIONS "EMF4CPP_USE_QT_5=1")
	target_link_libraries(«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» Qt5::Core)
elseif(EMF4CPP_RESOURCE_API AND EMF4CPP_USE_CPPREST)
	set_target_properties(«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» PROPERTIES COMPILE_FLAGS "-DMAKE_ECORE_DLL" VERSION ${PROJECT_VERSION} SOVERSION ${PROJECT_VERSION_MAJOR} COMPILE_DEFINITIONS "EMF4CPP_USE_CPPREST=1")
	target_link_libraries(«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» cpprestsdk::cpprest)
else()
	if(EMF4CPP_RESOURCE_API)
		message(FATAL_ERROR "Use QT / CPPRESTSDK")
	endif(EMF4CPP_RESOURCE_API)
endif(EMF4CPP_USE_QT_5)
target_link_libraries(«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» ${Boost_LIBRARIES})
install(TARGETS «((String) GLOBALVAR projectName).toLowerCase()»-«fqn» EXPORT EMF4CPP LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
«ELSE-»
set_target_properties(«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» PROPERTIES COMPILE_FLAGS "-DMAKE_«getHeaderDef()»_DLL" VERSION ${PROJECT_VERSION} SOVERSION ${PROJECT_VERSION_MAJOR})
target_link_libraries(«((String) GLOBALVAR projectName).toLowerCase()»-«fqn» EMF4CPP::emf4cpp-ecore EMF4CPP::emf4cpp-ecorecpp)
install(TARGETS «((String) GLOBALVAR projectName).toLowerCase()»-«fqn» EXPORT «((String) GLOBALVAR projectName).toUpperCase()» LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR})
«ENDIF-»

add_subdirectory(cmake)
«ENDFILE»
«ENDLET»
«ENDDEFINE»
